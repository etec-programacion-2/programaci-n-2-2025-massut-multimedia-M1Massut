/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example
import org.example.model.User
import org.example.repository.UserRepository
import org.example.repository.UserRepositoryImpl
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.transactions.transaction
import org.example.persistence.UsersTable

fun main {

    Database.connetc ("jdbc:sqlite:data.db", "org.sqlite.JDBC")

    transaction {
    SchemaUtils.create(UsersTable)
    }
    // 1. Create 
    val userRepository: UserRepository = UserRepositoryImpl()
   println("--- Creating users ---")
    userRepository.create(User(0, "Alice", "alice@example.com"))
    userRepository.create(User(0, "Bob", "bob@example.com"))
    println("Users created.")

    // 2. Read all
    println("\n--- Reading all users ---")
    val allUsers = userRepository.readAll()
    allUsers.forEach { println(it) }

    // 3. Read one
    println("\n--- Reading user with id 1 ---")
    val user = userRepository.read(1)
    println(user)

    // 4. Update
    println("\n--- Updating user with id 1 ---")
    userRepository.update(1, User(1, "Alicia", "alicia@example.com"))
    val updatedUser = userRepository.read(1)
    println("User updated: $updatedUser")

    // 5. Delete
    println("\n--- Deleting user with id 2 ---")
    userRepository.delete(2)
    println("User deleted.")

    // 6. Read all again
    println("\n--- Reading all users after deletion ---")
    val remainingUsers = userRepository.readAll()
    remainingUsers.forEach { println(it) }
}





}
import org.example.Clases.Audio

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}
